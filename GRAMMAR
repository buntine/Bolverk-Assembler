The following is my attempt at describing context-free grammar and a
formal grammar for this language.

Notes:
  - EPS represents an epsilon production (generally an empty string or optional step).
  - Terminals in the formal grammar are wrapped in double-quotes.
  - The $ token is added by the scanner. It indicates the end of program input.
  - Characters are translated to integers by the lexer, hence they don't appear in the formal grammar.



CONTEXT-FREE GRAMMAR

comma    -->  ,
keyword  -->  letter (letter)*
letter   -->  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z
number   -->  digit | digit digit | digit digit digit
char     -->  '<single-ascii-character>'
digit    -->  0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
comment  -->  -- (non-newline)* newline



FORMAL GRAMMAR

program           --> statement_list $
statement_list    --> statement statement_list | EPS
statement         --> "keyword" number_list
number_list       --> "number" number_list_tail
number_list_tail  --> "," "number" number_list_tail | EPS



PREDICT SET

1. program           --> statement_list $ { keyword $ }
2. statement_list    --> statement statement_list { keyword }
3. statement_list    --> EPS { $ }
4. statement         --> "keyword" number_list { keyword }
5. number_list       --> "number" number_list_tail { number }
6. number_list_tail  --> "comma" "number" number_list_tail { comma }
7. number_list_tail  --> EPS { keyword $ }
