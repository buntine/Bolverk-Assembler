=========================================
===      Bolverk Assembler v0.0.2     ===
===         By Andrew Buntine         ===
=========================================

1) General notes

  - Traditionally, Assembly languages define a semi-direct mapping of names to native instructions, without
    more obvious abstractions. Bolverk Assembler follows along these lines.

  - All storable numbers, memory cells and registers are represented as demical integers. For example:
    - Register 1: 1
    - Register A: 10
    - Cell A0:    160
    - -20:        -20
    - 230:        ERROR! (cannot store)

  - Integers are 8-bit signed. This means we can only store -128 to 127 successfully. Anything outside of
    this range will cause a SemanticError exception during compilation.

  - Comments are denoted by two hyphens and terminated by the newline character. They can appear on their own
    lines or be appended to the end of another line.

  - ASCII-encoded characters can be referenced by enclosing them in single quotes. Only one character may appear
    at a time. Otherwise, a SyntaxError exception is caused.
    - LOAD 1, 'Y'  -- Valid
    - LOAD 2, 'O'  -- Valid
    - LOAD 3, 'YO' -- Syntax error

  - Procedures are case-insensitive. The compiler doesn't care.

  - Arguments to procedures must be comma-delimited.


2) Primitive procedures

  PROCEDURE | ARGUMENTS  | DESCRIPTION
  --------------------------------------------------------------------------------------------
  MEML      | R, MC      | Loads the contents of memory cell MC into register R.
  VALL      | R, V       | Loads the value V into register R.
  STOR      | R, MC      | Stores the contents of regsister R into the memory cell MC.
  MOVE      | RA, RB     | Moves (copies) the contents of register RA into register RB.
  BADD      | RA, RB, RC | Add, as binary, the contents of registers RA and RB. Store the result
                           in register RC.
  FADD      | RA, RB, RC | Add, as floating point numbers, the contents of registers RA and RB.
                           Store the result in register RC.
  OR        | RA, RB, RC | Logical OR the contents of registers RA and RB. Store the result in
                           register RC.
  AND       | RA, RB, RC | Logical AND the contents of registers RA and RB. Store the result in
                           register RC.
  XOR       | RA, RB, RC | Logical EXCLUSIVE OR the contents of registers RA ad RB. Store the
                           result in register RC.
  ROT       | R, N       | Rotate the contents of register R to the right in a circular motion,
                           N times.
  JUMP      | R, MC      | Jump to the instruction stored at the memory cell MC if the contents of register
                           R is equal to the contents of register 0. Otherwise, continue onto the next
                           instruction as per normal.
  PMCH      | MC         | Print the contents of memory cell MC to STDOUT as though it was an
                           ASCII character.
  PMDE      | MC         | Print the contents of memory cell MC to STDOUT as though it was a
                           decimal number
  PMFP      | MC         | Print the contents of memory cell MC to STDOUT as though it was a
                           floating point number.
  PVCH      | V          | Print the value represented by V to STDOUT as though it was an
                           ASCII character.
  PVDE      | V          | Print the value represented by V to STDOUT as though it was a decimal
                           number
  PVFP      | V          | Print the value represented by V to STDOUT as though it was a
                           floating point number.
  WRIT      | V, MC      | Stores the value represented by V in the memory cell MC (VALL + STOR).
  PVDS      | RA, RB     | Add, as binary, the contents of registers RA and RB. Print the result
                           to STDOUT.
